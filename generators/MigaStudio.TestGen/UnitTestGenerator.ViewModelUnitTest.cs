using System.Collections.Generic;
using System.IO;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace MigaStudio.TestGen
{
    public class ClassSyntaxVisitor : CSharpSyntaxWalker
    {
        private const string UnitTestClassFileContent = @"
// <auto-generated/>
namespace Acorisoft.FutureGL.MigaStudio
{{
    [TestClass, TestCategory(""ViewModel"")]
    public class {0}Fixture
    {{
        public void InitializeThisUnitTest()
        {{
            var vm = new {0}();
        }}
    }}
}}
";
        
        
        private const string UnitTestEngineFileContent = @"
// <auto-generated/>
namespace Acorisoft.FutureGL.MigaDB.Tests.Engines.Data
{{
    [TestClass, TestCategory(""Engine"")]
    public class {0}Fixture
    {{
        public void InitializeThisUnitTest()
        {{
            var vm = new {0}();
        }}
    }}
}}
";
        
        private readonly List<string> ViewModels = new List<string>(32);
        private readonly List<string> Engines    = new List<string>(32);

        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            var keyword = node.Identifier
                              .ToFullString()
                .Replace("\r", "")
                .Replace("\n", "")
                .Trim();
            if (!string.IsNullOrEmpty(keyword) &&
                keyword.EndsWith("ViewModel"))
            {
                ViewModels.Add(keyword);
            }
            
            if (!string.IsNullOrEmpty(keyword) &&
                keyword.EndsWith("Engine"))
            {
                Engines.Add(keyword);
            }
        }

        public void Dump(string outputDir)
        {
            foreach (var className in ViewModels)
            {
                var fileNamePrefix = $"{className}Fixture.cs";
                var fileName       = Path.Combine(outputDir, fileNamePrefix);
                File.WriteAllText(fileName, string.Format(UnitTestClassFileContent, className));
            }
            
            
            foreach (var className in Engines)
            {
                var fileNamePrefix = $"{className}Fixture.cs";
                var fileName       = Path.Combine(outputDir, fileNamePrefix);
                File.WriteAllText(fileName, string.Format(UnitTestEngineFileContent, className));
            }
        }

    }
}